http://spacemath.xyz/

____________________________
_________ТИМУР____________

# 5. Задайте число. Составьте список чисел Фибоначчи, 
# в том числе для отрицательных индексов.

# *Пример:*

# - для k = 8 список будет выглядеть так: 
# [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21] [Негафибоначчи]

fib = [0, 1]
n = int(input(' Введите число: '))
fibn = [0, 1]
for i in range(2, n + 1):
    next = fib[i-1] + fib[i-2]
    if i % 2 == 0:
        fibn.append(-next)
    else:
        fibn.append(next)
    fib.append(next)
print(fib)
print(fibn)

print(fibn[1:][::-1] + fib)
............................................

еще вариант
............................................
def fibanachi(n):
    if n in (1, 2):
        return 1
    else:
        return fibanachi(n-1) + fibanachi(n-2)

N = int(input('Enter n: '))
fib_arr = []
for i in range(1, N + 1):
    fib_arr.append(fibanachi(i))
    fib_arr.insert(0, 0)
for i in range(1, N + 1):
    fib_arr.insert(0, ((-1)**(i + 1)) * fibanachi(i))
print(fib_arr)
..............................................
еще варинат
..............................................
def fib(n):
    if n in (1, 2):
        return 1
    else:
        return fib(n-1) + fib(n-2)

def check():
    n = int(input('Введите целое число: '))
    return n

def make_list(n):
    list_fib = [0,]
    for i in range(1, n+1):
        list_fib.append(fib(i))
        list_fib.insert(0,(-1)**(i+1)*(fib(i)))
        #list_fib.sort()
    return list_fib

print(fib(check()))
print(make_list((check())))
..................................................

# 2. Найдите корни квадратного уравнения Ax² + Bx + C = 0 ) 
# с помощью математических формул нахождения корней квадратного уравнения

import math

print("Введите коэффициенты для уравнения")
print("ax^2 + bx + c = 0:")
a = float(input("a = "))
b = float(input("b = "))
c = float(input("c = "))

discr = b ** 2 - 4 * a * c
print("Дискриминант D = %.2f" % discr)

if discr > 0:
    x1 = (-b + math.sqrt(discr)) / (2 * a)
    x2 = (-b - math.sqrt(discr)) / (2 * a)
    print("x1 = %.2f \nx2 = %.2f" % (x1, x2))
elif discr == 0:
    x = -b / (2 * a)
    print("x = %.2f" % x)
else:
    print("Корней нет")

..........................................
еще вариант
..........................................
a = int(input('Введите число а '))
b = int(input('Введите число b '))
c = int(input('Введите число c '))
D = b**2 - 4*a*c
if D > 0:
    print(f'Имеет два решения {(-b + D**0.5) / 2*a} и {(-b - D**0.5) / 2*a}')
elif D < 0:
    print('Нет решений')
else:
    print(f'есть одно решение {-b / 2 * a}')


______________________________________________________________

# 3. Задайте два числа. Напишите программу, которая найдёт НОК 
# (наименьшее общее кратное) этих двух чисел.

try:
    n = int(input('Введите целое число 1:'))
    m = int(input('Введите целое число 2:'))
except ValueError:
    n = int(input('Нужно ввести целое число 1:'))
    m = int(input('Нужно ввести целое число 2:'))

def nok(n, m):
    i = min(n, m)
    while True:
        if i % n == 0 and i % m == 0:
            break
        i += 1
    return(i)
................................................
еще вариант
................................................

def lcm(a, b):
    for i in range(max(a, b), a * b + 1):
        if i % a == 0 and i % b == 0:
        	return i


def main():
    try:
        a = int(input('Input number A: '))
        b = int(input('Input number B: '))
    except ValueError as ex:
        print('Input natural number!')
        exit(ex)

print(f'LCM({a}, {b}) = {lcm(a, b)}')


if __name__ == '__main__':
    main()



